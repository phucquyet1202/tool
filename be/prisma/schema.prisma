generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum Status {
    PENDING
    PAID
    FAILED
}

// Enum để định nghĩa các nền tảng chính
enum PlatformType {
    YOUTUBE
    FACEBOOK
    TIKTOK
}

model User {
    id         String   @id @default(uuid())
    email      String   @unique
    password   String
    name       String?
    role       Role     @default(USER)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Quan hệ
    orders    Order[]
    histories History[]
    platforms UserPlatform[]
}

model PlatformService {
    id          String       @id @default(uuid())
    name        String       @unique
    description String?
    base_price  Int // Giá thuê cơ bản theo tháng (hoặc đơn vị chính)
    platform    PlatformType // YT, FB, TT
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
}

model UserPlatform {
    id                 String       @id @default(uuid())
    user_id            String
    platform_type      PlatformType
    subscription_start DateTime?
    subscription_end   DateTime?
    subscription_days  Int? // Số ngày thuê, nếu có
    is_paid            Boolean      @default(false)
    is_live            Boolean      @default(false) // Dùng để stop live khi cần
    created_at         DateTime     @default(now())
    updated_at         DateTime     @updatedAt

    user User @relation(fields: [user_id], references: [id])
}

model Order {
    id                String               @id @default(uuid())
    user_id           String
    amount            Int
    status            Status               @default(PENDING)
    created_at        DateTime             @default(now())
    updated_at        DateTime             @updatedAt
    subscription_days Int? // Số ngày thuê, nếu có
    user              User                 @relation(fields: [user_id], references: [id])
    transactions      PaymentTransaction[]
    tool_id           String?
    tool              Tool?                @relation(fields: [tool_id], references: [id])

    // Thêm field này để hỗ trợ thuê lẻ
    platform_type PlatformType?
}

model PaymentTransaction {
    id             String   @id @default(uuid())
    order_id       String
    amount         Int
    status         Status
    transaction_id String?
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt

    order Order @relation(fields: [order_id], references: [id])
}

model History {
    id         String   @id @default(uuid())
    user_id    String
    order_id   String
    amount     Int
    paid_date  DateTime
    action     String
    detail     String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id])
}

model Tool {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?  @default("YOUTYPE, FACEBOOK")
    base_price  Int
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    orders Order[]
}
