// src/ffmpeg/ffmpeg.service.ts
import { Injectable } from '@nestjs/common';
import ffmpeg from 'fluent-ffmpeg';
import { exec } from 'child_process';
import * as path from 'path';

@Injectable()
export class FfmpegService {
  private processes: Record<string, ffmpeg.FfmpegCommand> = {};

  constructor() {
    ffmpeg.setFfmpegPath(
      'D:/ffmpeg/ffmpeg-7.1.1-essentials_build/bin/ffmpeg.exe',
    );
  }

  private getDirectStreamUrls(videoUrl: string): Promise<string[]> {
    return new Promise((resolve, reject) => {
      const ytDlpPath = path.resolve('D:/ffmpeg/yt-dlp.exe');
      const command = `"${ytDlpPath}" -f bestvideo+bestaudio -g "${videoUrl}"`;

      exec(command, (error, stdout, stderr) => {
        if (error) {
          console.error('yt-dlp error:', stderr || error.message);
          return reject('Kh√¥ng l·∫•y ƒë∆∞·ª£c link tr·ª±c ti·∫øp t·ª´ YouTube.');
        }

        const lines = stdout.trim().split('\n');
        if (lines.length < 2) {
          return reject('Kh√¥ng t√¨m th·∫•y ƒë·ªß link video/audio t·ª´ yt-dlp.');
        }

        resolve(lines);
      });
    });
  }

  async startLivestream(
    videoUrl: string,
    outputUrl: string,
    platform: string,
  ): Promise<any> {
    if (this.processes[platform]) {
      throw new Error(
        `ƒê√£ c√≥ m·ªôt livestream ƒëang ch·∫°y cho n·ªÅn t·∫£ng "${platform}".`,
      );
    }

    try {
      const [videoStreamUrl, audioStreamUrl] =
        await this.getDirectStreamUrls(videoUrl);

      return new Promise((resolve, reject) => {
        const process = ffmpeg()
          .addInput(videoStreamUrl)
          .addInputOption('-re') // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô ƒë·ªçc video theo th·ªùi gian th·ª±c
          .addInput(audioStreamUrl)
          .addInputOption('-re') // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô ƒë·ªçc √¢m thanh theo th·ªùi gian th·ª±c
          .inputOptions('-stream_loop', '-1') // L·∫∑p l·∫°i video/audio v√¥ h·∫°n
          .videoCodec('libx264') // M√£ h√≥a video
          .audioCodec('aac') // M√£ h√≥a √¢m thanh
          .addOption('-preset', 'ultrafast') // C·∫•u h√¨nh t·ªëc ƒë·ªô m√£ h√≥a
          .addOption('-tune', 'zerolatency') // T·ªëi ∆∞u cho ƒë·ªô tr·ªÖ th·∫•p
          .format('flv') // ƒê·ªãnh d·∫°ng video ƒë·∫ßu ra
          .output(outputUrl) // URL RTMP c·ªßa n·ªÅn t·∫£ng
          .on('start', (commandLine) => {
            console.log(
              `FFmpeg process started for "${platform}":`,
              // commandLine,
            );
          })
          .on('end', () => {
            console.log(`FFmpeg process ended for "${platform}"`);
            delete this.processes[platform];
            resolve(`Livestream k·∫øt th√∫c cho n·ªÅn t·∫£ng "${platform}"`);
          })
          .on('error', (err) => {
            console.error(`FFmpeg error for "${platform}":`, err);
            delete this.processes[platform];
            reject(`L·ªói livestream cho n·ªÅn t·∫£ng "${platform}"`);
          });
        // .on('stderr', (stderrLine) => {
        //   console.log(`FFmpeg stderr: ${stderrLine}`);
        // });

        this.processes[platform] = process;
        process.run();
      });
    } catch (err) {
      throw new Error(
        typeof err === 'string' ? err : 'L·ªói khi l·∫•y link YouTube',
      );
    }
  }

  stopLivestream(platform: string): Promise<any> {
    return new Promise((resolve, reject) => {
      const process: any = this.processes[platform];
      if (!process) {
        return reject(
          `Kh√¥ng c√≥ livestream n√†o ƒëang ch·∫°y cho n·ªÅn t·∫£ng "${platform}".`,
        );
      }

      const ffmpegProc = process.ffmpegProc; // üü¢ S·ª≠a ch·ªó n√†y
      if (ffmpegProc) {
        let resolved = false;

        ffmpegProc.on('close', (code: number) => {
          console.log(
            `FFmpeg process for "${platform}" closed with code:`,
            code,
          );
          if (!resolved) {
            resolved = true;
            delete this.processes[platform];
            resolve(`ƒê√£ d·ª´ng livestream cho n·ªÅn t·∫£ng "${platform}"`);
          }
        });

        if (ffmpegProc.stdin?.writable) {
          ffmpegProc.stdin.write('q'); // G·ª≠i l·ªánh "quit" cho ffmpeg
        } else {
          ffmpegProc.kill('SIGINT'); // fallback n·∫øu stdin kh√¥ng kh·∫£ d·ª•ng
        }

        // Timeout: N·∫øu sau 5s ch∆∞a close -> force kill
        setTimeout(() => {
          if (!resolved) {
            console.warn(`FFmpeg for "${platform}" kh√¥ng ph·∫£n h·ªìi, bu·ªôc d·ª´ng.`);
            ffmpegProc.kill('SIGKILL');
            delete this.processes[platform];
            resolve(`Bu·ªôc d·ª´ng livestream "${platform}" sau timeout`);
          }
        }, 2000);
      } else {
        delete this.processes[platform];
        resolve(`FFmpeg process kh√¥ng t·ªìn t·∫°i cho n·ªÅn t·∫£ng "${platform}"`);
      }
    });
  }
}
