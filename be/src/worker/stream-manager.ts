// workers/stream-manager.ts
import { ChildProcessWithoutNullStreams } from 'child_process';
import { startPythonWorker } from './worker.service';
import { StreamPayload } from 'src/livestream/types/stream-payload.interface';
import treeKill from 'tree-kill';
import { ConflictException, BadRequestException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

const VALID_PLATFORMS = ['youtube', 'facebook', 'tiktok'] as const;
type Platform = (typeof VALID_PLATFORMS)[number];

const runningProcesses = new Map<string, ChildProcessWithoutNullStreams>();
const prisma = new PrismaService(); // N·∫øu b·∫°n inject qua constructor th√¨ b·ªè d√≤ng n√†y ƒëi.

function getKey(userId: string, platform: string) {
  return `${userId}-${platform}`;
}

// ‚úÖ H√†m c·∫≠p nh·∫≠t status
async function updatePlatformStatus(
  userId: string,
  platform: string,
  status: boolean,
) {
  if (!VALID_PLATFORMS.includes(platform as Platform)) {
    console.warn(`[WARN] Platform kh√¥ng h·ª£p l·ªá: ${platform}`);
    return;
  }

  const field =
    platform === 'youtube'
      ? 'status_yt'
      : platform === 'facebook'
        ? 'status_fb'
        : 'status_tt';
  await prisma.user.update({
    where: { id: userId },
    data: { [field]: status },
  });
}

// ‚úÖ B·∫Øt ƒë·∫ßu stream
export async function startStream(payload: StreamPayload): Promise<string> {
  const { userId, platform } = payload;
  const key = getKey(userId, platform);

  if (!VALID_PLATFORMS.includes(platform as Platform)) {
    throw new BadRequestException('Platform kh√¥ng h·ª£p l·ªá');
  }

  if (runningProcesses.has(key)) {
    throw new ConflictException(
      `ƒê√£ c√≥ lu·ªìng ch·∫°y cho ${platform} c·ªßa ${userId}, b·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p th√™m lu·ªìng kh√°c.`,
    );
  }

  const process = startPythonWorker(payload);

  process.stdout.on('data', (data) => console.log(`[${key}] stdout: ${data}`));
  process.stderr.on('data', (data) =>
    console.error(`[${key}] stderr: ${data}`),
  );
  process.on('exit', () => runningProcesses.delete(key));

  runningProcesses.set(key, process);

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
  await updatePlatformStatus(userId, platform, true);

  return `‚úÖ B·∫Øt ƒë·∫ßu ph√°t cho ${platform}`;
}

// ‚úÖ D·ª´ng stream
export async function stopStream(
  userId: string,
  platform: string,
): Promise<string> {
  const key = getKey(userId, platform);

  if (!VALID_PLATFORMS.includes(platform as Platform)) {
    return `‚ö†Ô∏è Platform kh√¥ng h·ª£p l·ªá`;
  }

  const proc = runningProcesses.get(key);
  if (!proc) return `‚ö†Ô∏è Kh√¥ng c√≥ lu·ªìng n√†o ƒëang ch·∫°y`;

  const pid = proc.pid;

  if (!pid) {
    return `‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh PID c·ªßa ti·∫øn tr√¨nh`;
  }

  treeKill(pid, 'SIGKILL', (err) => {
    if (err) {
      console.error(`[ERROR] Kh√¥ng th·ªÉ d·ª´ng ti·∫øn tr√¨nh ${pid}: ${err.message}`);
    } else {
      console.log(`[INFO] ƒê√£ d·ª´ng ti·∫øn tr√¨nh ${pid} (${key})`);
    }
  });

  runningProcesses.delete(key);

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i
  await updatePlatformStatus(userId, platform, false);

  return `üõë ƒê√£ g·ª≠i t√≠n hi·ªáu d·ª´ng ph√°t cho ${platform}`;
}
